import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule, ReactiveFormsModule, FormBuilder, FormGroup, Validators } from '@angular/forms';
import { RouterModule, Router } from '@angular/router';
import { AuthService } from '../../../services/auth';
import { InsuranceService } from '../../../services/insurance';
import { User } from '../../../models/user.model';
import { InsurancePolicy, InsuranceCalculation } from '../../../models/insurance.model';

@Component({
  selector: 'app-insurance-application',
  standalone: true,
  imports: [CommonModule, RouterModule, FormsModule, ReactiveFormsModule],
  templateUrl: './insurance-application.html',
  styleUrl: './insurance-application.css'
})
export class InsuranceApplicationComponent implements OnInit {
  currentUser: User | null = null;
  insuranceForm: FormGroup;
  isLoading = false;
  message = '';
  messageType: 'success' | 'error' = 'success';
  calculatedPremium = 0;
  showCalculation = false;

  seasons = ['Kharif', 'Rabi', 'Annual'];
  cropTypes = ['Wheat', 'Rice', 'Corn', 'Soybeans', 'Cotton', 'Sugarcane', 'Pulses', 'Vegetables', 'Fruits'];
  zoneTypes = ['Zone I', 'Zone II', 'Zone III'];

  constructor(
    private fb: FormBuilder,
    private authService: AuthService,
    private insuranceService: InsuranceService,
    private router: Router
  ) {
    this.insuranceForm = this.fb.group({
      season: ['', [Validators.required]],
      year: ['', [Validators.required, Validators.min(2020), Validators.max(2030)]],
      cropName: ['', [Validators.required]],
      cropType: ['', [Validators.required]],
      zoneType: ['', [Validators.required]],
      area: ['', [Validators.required, Validators.min(0.1)]],
      sumInsured: ['', [Validators.required, Validators.min(1000)]],
      insuranceCompany: ['', [Validators.required]]
    });
  }

  ngOnInit() {
    this.currentUser = this.authService.getCurrentUser();
    if (!this.currentUser || this.currentUser.userType !== 'FARMER') {
      this.router.navigate(['/login']);
      return;
    }
    
    // Set current year as default
    this.insuranceForm.patchValue({
      year: new Date().getFullYear()
    });
  }

  calculatePremium() {
    if (this.insuranceForm.valid) {
      this.isLoading = true;
      const formValue = this.insuranceForm.value;
      
      const calculation: InsuranceCalculation = {
        season: formValue.season,
        cropType: formValue.cropType,
        sumInsured: formValue.sumInsured,
        premiumRate: 0,
        premiumAmount: 0,
        governmentShare: 0,
        farmerShare: 0
      };

      this.insuranceService.calculatePremium(calculation).subscribe({
        next: (response) => {
          this.calculatedPremium = response.premiumAmount;
          this.showCalculation = true;
          this.isLoading = false;
        },
        error: (error) => {
          this.showMessage('Error calculating premium. Please try again.', 'error');
          this.isLoading = false;
        }
      });
    }
  }

  applyForInsurance() {
    if (this.insuranceForm.invalid || !this.showCalculation) {
      this.showMessage('Please calculate premium first and fill all required fields.', 'error');
      return;
    }

    this.isLoading = true;
    const formValue = this.insuranceForm.value;

    const insurancePolicy: InsurancePolicy = {
      id: 0, // Will be set by service
      farmerId: this.currentUser!.id,
      policyNumber: '', // Will be generated by service
      farmerName: this.currentUser!.fullName,
      season: formValue.season,
      year: formValue.year,
      cropName: formValue.cropName,
      cropType: formValue.cropType,
      area: formValue.area,
      zoneType: formValue.zoneType,
      sumInsured: formValue.sumInsured,
      premiumAmount: this.calculatedPremium || 0,
      premiumRate: this.getPremiumRate(),
      status: 'active',
      startDate: new Date(),
      endDate: new Date(new Date().setFullYear(new Date().getFullYear() + 1)),
      createdAt: new Date()
    };

    this.insuranceService.applyForInsurance(insurancePolicy).subscribe({
      next: (response) => {
        this.isLoading = false;
        if (response.success) {
          this.showMessage('Insurance application submitted successfully! It will be reviewed by admin.', 'success');
          this.insuranceForm.reset();
          this.insuranceForm.patchValue({ year: new Date().getFullYear() });
          this.showCalculation = false;
          this.calculatedPremium = 0;
        } else {
          this.showMessage(response.message, 'error');
        }
      },
      error: (error) => {
        this.isLoading = false;
        console.error('Error applying for insurance:', error);
        this.showMessage('Failed to submit insurance application. Please try again.', 'error');
      }
    });
  }

  resetForm() {
    this.insuranceForm.reset();
    this.insuranceForm.patchValue({ year: new Date().getFullYear() });
    this.showCalculation = false;
    this.calculatedPremium = 0;
    this.message = '';
  }

  private showMessage(message: string, type: 'success' | 'error') {
    this.message = message;
    this.messageType = type;
    setTimeout(() => {
      this.message = '';
    }, 5000);
  }

  getPremiumRate(): number {
    const season = this.insuranceForm.get('season')?.value;
    const cropType = this.insuranceForm.get('cropType')?.value;
    
    if (season === 'Kharif') return 2.0;
    if (season === 'Rabi') return 1.5;
    if (season === 'Annual' && (cropType === 'Vegetables' || cropType === 'Fruits')) return 5.0;
    return 2.0; // Default rate
  }
}
